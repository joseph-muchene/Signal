// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Profile {
  id           String     @id @default(uuid())
  userId       String     @unique
  profileImage String     @db.Text
  name         String     @db.Text
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Post         Post[]
  Like         Like[]
  communityId  String?
  Alert        Alert[]
  Comment      Comment[]

  @@index([communityId])
}

model Post {
  id          String     @id @default(uuid())
  username    String     @db.Text
  user        Profile    @relation(fields: [profileId], references: [id])
  profileId   String
  content     String
  postType    PostType   @default(REGULAR)
  media       String?
  likes       Like[]
  Community   Community? @relation(fields: [communityId], references: [id])
  communityId String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Comment     Comment[]

  @@index([profileId])
  @@index([communityId])
}

model Community {
  id          String    @id @default(uuid())
  name        String    @db.Text
  description String    @db.Text
  members    String[]
  posts       Post[]
  inviteUrl   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Like {
  id        String   @id @default(uuid())
  profile   Profile  @relation(fields: [profileId], references: [id])
  Post      Post     @relation(fields: [postId], references: [id])
  postId    String
  profileId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
  @@index([profileId])
}

model Comment {
  id        String  @id @default(uuid())
  content   String
  profile   Profile @relation(fields: [profileId], references: [id])
  profileId String
  post      Post    @relation(fields: [postId], references: [id])
  postId    String

  alert     Alert?   @relation(fields: [alertId], references: [id])
  alertId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([alertId])
  @@index([postId])
  @@index([profileId])
}

model Alert {
  id          String     @id @default(uuid())
  problem     String     @db.Text
  description String     @db.Text
  profile     Profile    @relation(fields: [profileId], references: [id])
  alertLevel  AlertLevel @default(LOW)
  profileId   String
  seen        String[]
  Comment     Comment[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([profileId])
}

enum PostType {
  REGULAR
  CRIME
  EMERGENCY
  MISSING_PERSON
  COMMUNITY_CONCERN
}

enum AlertLevel {
  LOW
  MODERATE
  HIGH
}
